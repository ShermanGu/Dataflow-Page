{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[8 8 8 8 0 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 0 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]]"}, {"id": "2", "type": "val", "name": "output_grid", "val": "[[8 8 8 8 0 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]\n [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 0 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]]"}, {"id": "3", "type": "stmt", "val": "num_non_black = `find the number of non-black colors in the first row`(input_grid)"}, {"id": "4", "type": "val", "name": "num_non_black", "val": "1"}, {"id": "5", "type": "stmt", "val": "output_grid = `if the num_non_black is not 1, rotate the grid 90 degrees`(output_grid, num_non_black)"}, {"id": "6", "type": "stmt", "val": "black_pixels_coordinates = `find all coordinates of all black pixels in input grid`(input_grid)"}, {"id": "9", "type": "val", "name": "coordinate", "val": "(0, 4)"}, {"id": "10", "type": "stmt", "val": "surrounding_colors = `find all surrounding colors`(input_grid, coordinate)"}, {"id": "11", "type": "val", "name": "surrounding_colors", "val": "[8, 8, 8, 8, 8]"}, {"id": "12", "type": "stmt", "val": "`If the pixel is in the same column of coordinates, and the pixel color is among the surrounding colors, paint it black`(output_grid, coordinate, surrounding_colors)"}, {"id": "13", "type": "val", "name": "output_grid", "val": "[[8 8 8 8 0 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 8 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 8 8 8]\n [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 0 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]]"}, {"id": "14", "type": "val", "name": "surrounding_colors", "val": "[8, 8, 8, 8]"}, {"id": "16", "type": "val", "name": "coordinate", "val": "(2, 12)"}, {"id": "17", "type": "stmt", "val": "surrounding_colors = `find all surrounding colors`(input_grid, coordinate)"}, {"id": "18", "type": "val", "name": "surrounding_colors", "val": "[8, 8, 8, 8, 8, 8, 8, 8]"}, {"id": "19", "type": "stmt", "val": "`If the pixel is in the same column of coordinates, and the pixel color is among the surrounding colors, paint it black`(output_grid, coordinate, surrounding_colors)"}, {"id": "20", "type": "val", "name": "output_grid", "val": "[[8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 0 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]]"}, {"id": "21", "type": "val", "name": "surrounding_colors", "val": "[8, 8, 8, 8, 8, 8, 8]"}, {"id": "23", "type": "val", "name": "coordinate", "val": "(6, 6)"}, {"id": "24", "type": "stmt", "val": "surrounding_colors = `find all surrounding colors`(input_grid, coordinate)"}, {"id": "25", "type": "val", "name": "surrounding_colors", "val": "[1, 1, 1, 1, 1, 1, 1, 1]"}, {"id": "26", "type": "stmt", "val": "`If the pixel is in the same column of coordinates, and the pixel color is among the surrounding colors, paint it black`(output_grid, coordinate, surrounding_colors)"}, {"id": "27", "type": "val", "name": "output_grid", "val": "[[8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 0 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]]"}, {"id": "28", "type": "val", "name": "surrounding_colors", "val": "[1, 1, 1, 1, 1, 1, 1]"}, {"id": "30", "type": "val", "name": "coordinate", "val": "(10, 10)"}, {"id": "31", "type": "stmt", "val": "surrounding_colors = `find all surrounding colors`(input_grid, coordinate)"}, {"id": "32", "type": "val", "name": "surrounding_colors", "val": "[4, 4, 4, 4, 4, 4, 4, 4]"}, {"id": "33", "type": "stmt", "val": "`If the pixel is in the same column of coordinates, and the pixel color is among the surrounding colors, paint it black`(output_grid, coordinate, surrounding_colors)"}, {"id": "34", "type": "val", "name": "output_grid", "val": "[[8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 0 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]]"}, {"id": "35", "type": "val", "name": "surrounding_colors", "val": "[4, 4, 4, 4, 4, 4, 4]"}, {"id": "37", "type": "val", "name": "coordinate", "val": "(15, 1)"}, {"id": "38", "type": "stmt", "val": "surrounding_colors = `find all surrounding colors`(input_grid, coordinate)"}, {"id": "39", "type": "val", "name": "surrounding_colors", "val": "[2, 2, 2, 2, 2, 2, 2, 2]"}, {"id": "40", "type": "stmt", "val": "`If the pixel is in the same column of coordinates, and the pixel color is among the surrounding colors, paint it black`(output_grid, coordinate, surrounding_colors)"}, {"id": "41", "type": "val", "name": "output_grid", "val": "[[8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [8 8 8 8 0 8 8 8 8 8 8 8 0 8 8]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 0 1 1 1 1 1 1 1 1]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [4 4 4 4 4 4 4 4 4 4 0 4 4 4 4]\n [2 0 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 0 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 0 2 2 2 2 2 2 2 2 2 2 2 2 2]\n [2 0 2 2 2 2 2 2 2 2 2 2 2 2 2]]"}, {"id": "44", "type": "stmt", "val": "output_grid = `if the num_non_black is not 1, rotate the grid 90 degrees`(output_grid, num_non_black)"}, {"id": "45", "type": "stmt", "val": "return output_grid"}], "edges": [["0", "3"], ["3", "4"], ["2", "5"], ["4", "5"], ["0", "6"], ["9", "10"], ["0", "10"], ["10", "11"], ["9", "12"], ["2", "12"], ["11", "12"], ["12", "13"], ["12", "14"], ["16", "17"], ["14", "17"], ["0", "17"], ["17", "18"], ["16", "19"], ["13", "19"], ["18", "19"], ["19", "20"], ["19", "21"], ["23", "24"], ["21", "24"], ["0", "24"], ["24", "25"], ["23", "26"], ["20", "26"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["28", "31"], ["0", "31"], ["31", "32"], ["30", "33"], ["27", "33"], ["32", "33"], ["33", "34"], ["33", "35"], ["37", "38"], ["35", "38"], ["0", "38"], ["38", "39"], ["37", "40"], ["34", "40"], ["39", "40"], ["40", "41"], ["41", "44"], ["4", "44"], ["41", "45"]]}