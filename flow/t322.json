{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "teal_point = `find the teal point`(input_grid)"}, {"id": "4", "type": "val", "name": "current_point", "val": "(5, 5)"}, {"id": "5", "type": "stmt", "val": "while `current point Not exceeding the boundary`(input_grid, current_point):"}, {"id": "6", "type": "stmt", "val": "input_grid = `draw its two upper points to grey`(input_grid, current_point)"}, {"id": "7", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "8", "type": "stmt", "val": "current_point = `point move up two points`(input_grid, current_point)"}, {"id": "9", "type": "val", "name": "current_point", "val": "(3, 5)"}, {"id": "10", "type": "stmt", "val": "if `current point Not exceeding the boundary`(input_grid, current_point) == False:"}, {"id": "11", "type": "stmt", "val": "input_grid = `draw its two right adjacent points to grey`(input_grid, current_point)"}, {"id": "12", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 5 5 5 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "13", "type": "stmt", "val": "current_point = `point move right two points`(input_grid, current_point)"}, {"id": "14", "type": "val", "name": "current_point", "val": "(3, 7)"}, {"id": "15", "type": "stmt", "val": "while `current point Not exceeding the boundary`(input_grid, current_point):"}, {"id": "16", "type": "stmt", "val": "input_grid = `draw its two upper points to grey`(input_grid, current_point)"}, {"id": "17", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 5 0 0 0 0 0]\n [0 0 0 0 0 0 0 5 0 0 0 0 0]\n [0 0 0 0 0 5 5 5 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "18", "type": "stmt", "val": "current_point = `point move up two points`(input_grid, current_point)"}, {"id": "19", "type": "val", "name": "current_point", "val": "(1, 7)"}, {"id": "20", "type": "stmt", "val": "if `current point Not exceeding the boundary`(input_grid, current_point) == False:"}, {"id": "21", "type": "stmt", "val": "input_grid = `draw its two right adjacent points to grey`(input_grid, current_point)"}, {"id": "22", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 5 5 5 0 0 0]\n [0 0 0 0 0 0 0 5 0 0 0 0 0]\n [0 0 0 0 0 5 5 5 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "23", "type": "stmt", "val": "current_point = `point move right two points`(input_grid, current_point)"}, {"id": "24", "type": "val", "name": "current_point", "val": "(1, 9)"}, {"id": "25", "type": "stmt", "val": "while `current point Not exceeding the boundary`(input_grid, current_point):"}, {"id": "26", "type": "stmt", "val": "input_grid = `draw its two upper points to grey`(input_grid, current_point)"}, {"id": "27", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 5 0 0 0]\n [0 0 0 0 0 0 0 5 5 5 0 0 0]\n [0 0 0 0 0 0 0 5 0 0 0 0 0]\n [0 0 0 0 0 5 5 5 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "28", "type": "stmt", "val": "current_point = `point move up two points`(input_grid, current_point)"}, {"id": "29", "type": "val", "name": "current_point", "val": "(-1, 9)"}, {"id": "30", "type": "stmt", "val": "if `current point Not exceeding the boundary`(input_grid, current_point) == False:"}, {"id": "33", "type": "val", "name": "current_point", "val": "(5, 5)"}, {"id": "34", "type": "stmt", "val": "while `current point Not exceeding the boundary`(input_grid, current_point):"}, {"id": "35", "type": "stmt", "val": "input_grid = `draw its two lower points to grey`(input_grid, current_point)"}, {"id": "36", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 5 0 0 0]\n [0 0 0 0 0 0 0 5 5 5 0 0 0]\n [0 0 0 0 0 0 0 5 0 0 0 0 0]\n [0 0 0 0 0 5 5 5 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "37", "type": "stmt", "val": "current_point = `point move down two points`(input_grid, current_point)"}, {"id": "38", "type": "val", "name": "current_point", "val": "(7, 5)"}, {"id": "39", "type": "stmt", "val": "if `current point Not exceeding the boundary`(input_grid, current_point) == False:"}, {"id": "40", "type": "stmt", "val": "input_grid = `you get a grid and a point. you should change the two left point whcih are in same row as the input point to grey.before draw these point, you should check if they is with in boundry`(input_grid, current_point)"}, {"id": "41", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 5 0 0 0]\n [0 0 0 0 0 0 0 5 5 5 0 0 0]\n [0 0 0 0 0 0 0 5 0 0 0 0 0]\n [0 0 0 0 0 5 5 5 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 5 5 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "42", "type": "stmt", "val": "current_point = `point move left two points`(input_grid, current_point)"}, {"id": "43", "type": "val", "name": "current_point", "val": "(7, 3)"}, {"id": "44", "type": "stmt", "val": "while `current point Not exceeding the boundary`(input_grid, current_point):"}, {"id": "45", "type": "stmt", "val": "input_grid = `draw its two lower points to grey`(input_grid, current_point)"}, {"id": "46", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 5 0 0 0]\n [0 0 0 0 0 0 0 5 5 5 0 0 0]\n [0 0 0 0 0 0 0 5 0 0 0 0 0]\n [0 0 0 0 0 5 5 5 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 5 5 5 0 0 0 0 0 0 0]\n [0 0 0 5 0 0 0 0 0 0 0 0 0]\n [0 0 0 5 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "47", "type": "stmt", "val": "current_point = `point move down two points`(input_grid, current_point)"}, {"id": "48", "type": "val", "name": "current_point", "val": "(9, 3)"}, {"id": "49", "type": "stmt", "val": "if `current point Not exceeding the boundary`(input_grid, current_point) == False:"}, {"id": "50", "type": "stmt", "val": "input_grid = `you get a grid and a point. you should change the two left point whcih are in same row as the input point to grey.before draw these point, you should check if they is with in boundry`(input_grid, current_point)"}, {"id": "51", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 5 0 0 0]\n [0 0 0 0 0 0 0 5 5 5 0 0 0]\n [0 0 0 0 0 0 0 5 0 0 0 0 0]\n [0 0 0 0 0 5 5 5 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 5 5 5 0 0 0 0 0 0 0]\n [0 0 0 5 0 0 0 0 0 0 0 0 0]\n [0 5 5 5 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "52", "type": "stmt", "val": "current_point = `point move left two points`(input_grid, current_point)"}, {"id": "53", "type": "val", "name": "current_point", "val": "(9, 1)"}, {"id": "54", "type": "stmt", "val": "while `current point Not exceeding the boundary`(input_grid, current_point):"}, {"id": "55", "type": "stmt", "val": "input_grid = `draw its two lower points to grey`(input_grid, current_point)"}, {"id": "56", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 5 0 0 0]\n [0 0 0 0 0 0 0 5 5 5 0 0 0]\n [0 0 0 0 0 0 0 5 0 0 0 0 0]\n [0 0 0 0 0 5 5 5 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 5 5 5 0 0 0 0 0 0 0]\n [0 0 0 5 0 0 0 0 0 0 0 0 0]\n [0 5 5 5 0 0 0 0 0 0 0 0 0]\n [0 5 0 0 0 0 0 0 0 0 0 0 0]\n [0 5 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "57", "type": "stmt", "val": "current_point = `point move down two points`(input_grid, current_point)"}, {"id": "58", "type": "val", "name": "current_point", "val": "(11, 1)"}, {"id": "59", "type": "stmt", "val": "if `current point Not exceeding the boundary`(input_grid, current_point) == False:"}, {"id": "60", "type": "stmt", "val": "input_grid = `you get a grid and a point. you should change the two left point whcih are in same row as the input point to grey.before draw these point, you should check if they is with in boundry`(input_grid, current_point)"}, {"id": "61", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 5 0 0 0]\n [0 0 0 0 0 0 0 5 5 5 0 0 0]\n [0 0 0 0 0 0 0 5 0 0 0 0 0]\n [0 0 0 0 0 5 5 5 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 0 0 8 0 0 0 0 0 0 0]\n [0 0 0 0 0 5 0 0 0 0 0 0 0]\n [0 0 0 5 5 5 0 0 0 0 0 0 0]\n [0 0 0 5 0 0 0 0 0 0 0 0 0]\n [0 5 5 5 0 0 0 0 0 0 0 0 0]\n [0 5 0 0 0 0 0 0 0 0 0 0 0]\n [5 5 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "62", "type": "stmt", "val": "current_point = `point move left two points`(input_grid, current_point)"}, {"id": "63", "type": "val", "name": "current_point", "val": "(11, -1)"}, {"id": "64", "type": "stmt", "val": "while `current point Not exceeding the boundary`(input_grid, current_point):"}, {"id": "65", "type": "stmt", "val": "return input_grid"}], "edges": [["0", "1"], ["0", "5"], ["4", "5"], ["0", "6"], ["4", "6"], ["6", "7"], ["7", "8"], ["4", "8"], ["8", "9"], ["7", "10"], ["9", "10"], ["7", "11"], ["9", "11"], ["11", "12"], ["12", "13"], ["9", "13"], ["13", "14"], ["12", "15"], ["14", "15"], ["12", "16"], ["14", "16"], ["16", "17"], ["17", "18"], ["14", "18"], ["18", "19"], ["17", "20"], ["19", "20"], ["17", "21"], ["19", "21"], ["21", "22"], ["22", "23"], ["19", "23"], ["23", "24"], ["22", "25"], ["24", "25"], ["22", "26"], ["24", "26"], ["26", "27"], ["27", "28"], ["24", "28"], ["28", "29"], ["27", "30"], ["29", "30"], ["27", "34"], ["33", "34"], ["27", "35"], ["33", "35"], ["35", "36"], ["36", "37"], ["33", "37"], ["37", "38"], ["36", "39"], ["38", "39"], ["36", "40"], ["38", "40"], ["40", "41"], ["41", "42"], ["38", "42"], ["42", "43"], ["41", "44"], ["43", "44"], ["41", "45"], ["43", "45"], ["45", "46"], ["46", "47"], ["43", "47"], ["47", "48"], ["46", "49"], ["48", "49"], ["46", "50"], ["48", "50"], ["50", "51"], ["51", "52"], ["48", "52"], ["52", "53"], ["51", "54"], ["53", "54"], ["51", "55"], ["53", "55"], ["55", "56"], ["56", "57"], ["53", "57"], ["57", "58"], ["56", "59"], ["58", "59"], ["56", "60"], ["58", "60"], ["60", "61"], ["61", "62"], ["58", "62"], ["62", "63"], ["61", "64"], ["63", "64"], ["61", "65"]]}