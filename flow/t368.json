{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 5 5 5 5 5 0 0 5 5]\n [5 5 5 0 5 5 0 5 0 5]\n [5 5 0 5 5 5 5 5 0 5]\n [5 0 0 5 5 5 5 5 5 5]\n [0 5 5 5 5 5 0 5 5 5]\n [0 5 5 0 5 5 0 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "2", "type": "val", "name": "i", "val": "0"}, {"id": "4", "type": "val", "name": "j", "val": "0"}, {"id": "5", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "6", "type": "val", "name": "input_grid", "val": "[[4 5 5 5 5 5 0 0 5 5]\n [5 5 5 0 5 5 0 5 0 5]\n [5 5 0 5 5 5 5 5 0 5]\n [5 0 0 5 5 5 5 5 5 5]\n [0 5 5 5 5 5 0 5 5 5]\n [0 5 5 0 5 5 0 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "7", "type": "val", "name": "count", "val": "1"}, {"id": "9", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) green`(input_grid, i, j)"}, {"id": "10", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 0 0 5 5]\n [5 5 5 0 5 5 0 5 0 5]\n [5 5 0 5 5 5 5 5 0 5]\n [5 0 0 5 5 5 5 5 5 5]\n [0 5 5 5 5 5 0 5 5 5]\n [0 5 5 0 5 5 0 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "12", "type": "val", "name": "j", "val": "1"}, {"id": "13", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "14", "type": "val", "name": "count", "val": "0"}, {"id": "19", "type": "val", "name": "j", "val": "2"}, {"id": "20", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "25", "type": "val", "name": "j", "val": "3"}, {"id": "26", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "31", "type": "val", "name": "j", "val": "4"}, {"id": "32", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "37", "type": "val", "name": "j", "val": "5"}, {"id": "38", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "43", "type": "val", "name": "j", "val": "6"}, {"id": "44", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "45", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 4 4 5 5]\n [5 5 5 0 5 5 4 5 0 5]\n [5 5 0 5 5 5 5 5 0 5]\n [5 0 0 5 5 5 5 5 5 5]\n [0 5 5 5 5 5 0 5 5 5]\n [0 5 5 0 5 5 0 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "46", "type": "val", "name": "count", "val": "3"}, {"id": "50", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) green`_blue(input_grid, i, j)"}, {"id": "51", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 0 5 5 1 5 0 5]\n [5 5 0 5 5 5 5 5 0 5]\n [5 0 0 5 5 5 5 5 5 5]\n [0 5 5 5 5 5 0 5 5 5]\n [0 5 5 0 5 5 0 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "53", "type": "val", "name": "j", "val": "7"}, {"id": "54", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "55", "type": "val", "name": "count", "val": "0"}, {"id": "60", "type": "val", "name": "j", "val": "8"}, {"id": "61", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "66", "type": "val", "name": "j", "val": "9"}, {"id": "67", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "73", "type": "val", "name": "i", "val": "1"}, {"id": "75", "type": "val", "name": "j", "val": "0"}, {"id": "76", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "81", "type": "val", "name": "j", "val": "1"}, {"id": "82", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "87", "type": "val", "name": "j", "val": "2"}, {"id": "88", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "93", "type": "val", "name": "j", "val": "3"}, {"id": "94", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "95", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 4 5 5 1 5 0 5]\n [5 5 0 5 5 5 5 5 0 5]\n [5 0 0 5 5 5 5 5 5 5]\n [0 5 5 5 5 5 0 5 5 5]\n [0 5 5 0 5 5 0 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "96", "type": "val", "name": "count", "val": "1"}, {"id": "98", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) green`(input_grid, i, j)"}, {"id": "99", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 0 5]\n [5 5 0 5 5 5 5 5 0 5]\n [5 0 0 5 5 5 5 5 5 5]\n [0 5 5 5 5 5 0 5 5 5]\n [0 5 5 0 5 5 0 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "101", "type": "val", "name": "j", "val": "4"}, {"id": "102", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "103", "type": "val", "name": "count", "val": "0"}, {"id": "108", "type": "val", "name": "j", "val": "5"}, {"id": "109", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "114", "type": "val", "name": "j", "val": "6"}, {"id": "115", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "120", "type": "val", "name": "j", "val": "7"}, {"id": "121", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "126", "type": "val", "name": "j", "val": "8"}, {"id": "127", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "128", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 4 5]\n [5 5 0 5 5 5 5 5 4 5]\n [5 0 0 5 5 5 5 5 5 5]\n [0 5 5 5 5 5 0 5 5 5]\n [0 5 5 0 5 5 0 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "129", "type": "val", "name": "count", "val": "2"}, {"id": "132", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) red`(input_grid, i, j)"}, {"id": "133", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 0 5 5 5 5 5 2 5]\n [5 0 0 5 5 5 5 5 5 5]\n [0 5 5 5 5 5 0 5 5 5]\n [0 5 5 0 5 5 0 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "135", "type": "val", "name": "j", "val": "9"}, {"id": "136", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "137", "type": "val", "name": "count", "val": "0"}, {"id": "143", "type": "val", "name": "i", "val": "2"}, {"id": "145", "type": "val", "name": "j", "val": "0"}, {"id": "146", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "151", "type": "val", "name": "j", "val": "1"}, {"id": "152", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "157", "type": "val", "name": "j", "val": "2"}, {"id": "158", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "159", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 4 5 5 5 5 5 2 5]\n [5 4 4 5 5 5 5 5 5 5]\n [0 5 5 5 5 5 0 5 5 5]\n [0 5 5 0 5 5 0 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "160", "type": "val", "name": "count", "val": "3"}, {"id": "164", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) green`_blue(input_grid, i, j)"}, {"id": "165", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [0 5 5 5 5 5 0 5 5 5]\n [0 5 5 0 5 5 0 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "167", "type": "val", "name": "j", "val": "3"}, {"id": "168", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "169", "type": "val", "name": "count", "val": "0"}, {"id": "174", "type": "val", "name": "j", "val": "4"}, {"id": "175", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "180", "type": "val", "name": "j", "val": "5"}, {"id": "181", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "186", "type": "val", "name": "j", "val": "6"}, {"id": "187", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "192", "type": "val", "name": "j", "val": "7"}, {"id": "193", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "198", "type": "val", "name": "j", "val": "8"}, {"id": "199", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "204", "type": "val", "name": "j", "val": "9"}, {"id": "205", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "211", "type": "val", "name": "i", "val": "3"}, {"id": "213", "type": "val", "name": "j", "val": "0"}, {"id": "214", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "219", "type": "val", "name": "j", "val": "1"}, {"id": "220", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "225", "type": "val", "name": "j", "val": "2"}, {"id": "226", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "231", "type": "val", "name": "j", "val": "3"}, {"id": "232", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "237", "type": "val", "name": "j", "val": "4"}, {"id": "238", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "243", "type": "val", "name": "j", "val": "5"}, {"id": "244", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "249", "type": "val", "name": "j", "val": "6"}, {"id": "250", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "255", "type": "val", "name": "j", "val": "7"}, {"id": "256", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "261", "type": "val", "name": "j", "val": "8"}, {"id": "262", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "267", "type": "val", "name": "j", "val": "9"}, {"id": "268", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "274", "type": "val", "name": "i", "val": "4"}, {"id": "276", "type": "val", "name": "j", "val": "0"}, {"id": "277", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "278", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [4 5 5 5 5 5 0 5 5 5]\n [4 5 5 0 5 5 0 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "279", "type": "val", "name": "count", "val": "2"}, {"id": "282", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) red`(input_grid, i, j)"}, {"id": "283", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 0 5 5 5]\n [2 5 5 0 5 5 0 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "285", "type": "val", "name": "j", "val": "1"}, {"id": "286", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "287", "type": "val", "name": "count", "val": "0"}, {"id": "292", "type": "val", "name": "j", "val": "2"}, {"id": "293", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "298", "type": "val", "name": "j", "val": "3"}, {"id": "299", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "304", "type": "val", "name": "j", "val": "4"}, {"id": "305", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "310", "type": "val", "name": "j", "val": "5"}, {"id": "311", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "316", "type": "val", "name": "j", "val": "6"}, {"id": "317", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "318", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 4 5 5 5]\n [2 5 5 0 5 5 4 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "319", "type": "val", "name": "count", "val": "2"}, {"id": "322", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) red`(input_grid, i, j)"}, {"id": "323", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 0 5 5 2 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "325", "type": "val", "name": "j", "val": "7"}, {"id": "326", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "327", "type": "val", "name": "count", "val": "0"}, {"id": "332", "type": "val", "name": "j", "val": "8"}, {"id": "333", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "338", "type": "val", "name": "j", "val": "9"}, {"id": "339", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "345", "type": "val", "name": "i", "val": "5"}, {"id": "347", "type": "val", "name": "j", "val": "0"}, {"id": "348", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "353", "type": "val", "name": "j", "val": "1"}, {"id": "354", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "359", "type": "val", "name": "j", "val": "2"}, {"id": "360", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "365", "type": "val", "name": "j", "val": "3"}, {"id": "366", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "367", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 4 5 5 2 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "368", "type": "val", "name": "count", "val": "1"}, {"id": "370", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) green`(input_grid, i, j)"}, {"id": "371", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 0 0]\n [5 5 0 5 5 5 5 5 0 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "373", "type": "val", "name": "j", "val": "4"}, {"id": "374", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "375", "type": "val", "name": "count", "val": "0"}, {"id": "380", "type": "val", "name": "j", "val": "5"}, {"id": "381", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "386", "type": "val", "name": "j", "val": "6"}, {"id": "387", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "392", "type": "val", "name": "j", "val": "7"}, {"id": "393", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "398", "type": "val", "name": "j", "val": "8"}, {"id": "399", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "400", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 4 4]\n [5 5 0 5 5 5 5 5 4 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "401", "type": "val", "name": "count", "val": "3"}, {"id": "405", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) green`_blue(input_grid, i, j)"}, {"id": "406", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 1 1]\n [5 5 0 5 5 5 5 5 1 5]\n [5 5 0 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "408", "type": "val", "name": "j", "val": "9"}, {"id": "409", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "410", "type": "val", "name": "count", "val": "0"}, {"id": "416", "type": "val", "name": "i", "val": "6"}, {"id": "418", "type": "val", "name": "j", "val": "0"}, {"id": "419", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "424", "type": "val", "name": "j", "val": "1"}, {"id": "425", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "430", "type": "val", "name": "j", "val": "2"}, {"id": "431", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "432", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 1 1]\n [5 5 4 5 5 5 5 5 1 5]\n [5 5 4 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "433", "type": "val", "name": "count", "val": "2"}, {"id": "436", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) red`(input_grid, i, j)"}, {"id": "437", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 1 1]\n [5 5 2 5 5 5 5 5 1 5]\n [5 5 2 5 5 5 5 5 5 0]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "439", "type": "val", "name": "j", "val": "3"}, {"id": "440", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "441", "type": "val", "name": "count", "val": "0"}, {"id": "446", "type": "val", "name": "j", "val": "4"}, {"id": "447", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "452", "type": "val", "name": "j", "val": "5"}, {"id": "453", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "458", "type": "val", "name": "j", "val": "6"}, {"id": "459", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "464", "type": "val", "name": "j", "val": "7"}, {"id": "465", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "470", "type": "val", "name": "j", "val": "8"}, {"id": "471", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "476", "type": "val", "name": "j", "val": "9"}, {"id": "477", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "483", "type": "val", "name": "i", "val": "7"}, {"id": "485", "type": "val", "name": "j", "val": "0"}, {"id": "486", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "491", "type": "val", "name": "j", "val": "1"}, {"id": "492", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "497", "type": "val", "name": "j", "val": "2"}, {"id": "498", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "503", "type": "val", "name": "j", "val": "3"}, {"id": "504", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "509", "type": "val", "name": "j", "val": "4"}, {"id": "510", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "515", "type": "val", "name": "j", "val": "5"}, {"id": "516", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "521", "type": "val", "name": "j", "val": "6"}, {"id": "522", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "527", "type": "val", "name": "j", "val": "7"}, {"id": "528", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "533", "type": "val", "name": "j", "val": "8"}, {"id": "534", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "539", "type": "val", "name": "j", "val": "9"}, {"id": "540", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "541", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 1 1]\n [5 5 2 5 5 5 5 5 1 5]\n [5 5 2 5 5 5 5 5 5 4]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "542", "type": "val", "name": "count", "val": "1"}, {"id": "544", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) green`(input_grid, i, j)"}, {"id": "545", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 1 1]\n [5 5 2 5 5 5 5 5 1 5]\n [5 5 2 5 5 5 5 5 5 3]\n [0 0 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "548", "type": "val", "name": "i", "val": "8"}, {"id": "550", "type": "val", "name": "j", "val": "0"}, {"id": "551", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "552", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 1 1]\n [5 5 2 5 5 5 5 5 1 5]\n [5 5 2 5 5 5 5 5 5 3]\n [4 4 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "553", "type": "val", "name": "count", "val": "2"}, {"id": "556", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) red`(input_grid, i, j)"}, {"id": "557", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 1 1]\n [5 5 2 5 5 5 5 5 1 5]\n [5 5 2 5 5 5 5 5 5 3]\n [2 2 5 5 5 5 0 5 5 5]\n [5 5 5 5 0 5 0 0 5 0]]"}, {"id": "559", "type": "val", "name": "j", "val": "1"}, {"id": "560", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "561", "type": "val", "name": "count", "val": "0"}, {"id": "566", "type": "val", "name": "j", "val": "2"}, {"id": "567", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "572", "type": "val", "name": "j", "val": "3"}, {"id": "573", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "578", "type": "val", "name": "j", "val": "4"}, {"id": "579", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "584", "type": "val", "name": "j", "val": "5"}, {"id": "585", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "590", "type": "val", "name": "j", "val": "6"}, {"id": "591", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "592", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 1 1]\n [5 5 2 5 5 5 5 5 1 5]\n [5 5 2 5 5 5 5 5 5 3]\n [2 2 5 5 5 5 4 5 5 5]\n [5 5 5 5 0 5 4 4 5 0]]"}, {"id": "593", "type": "val", "name": "count", "val": "3"}, {"id": "597", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) green`_blue(input_grid, i, j)"}, {"id": "598", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 1 1]\n [5 5 2 5 5 5 5 5 1 5]\n [5 5 2 5 5 5 5 5 5 3]\n [2 2 5 5 5 5 1 5 5 5]\n [5 5 5 5 0 5 1 1 5 0]]"}, {"id": "600", "type": "val", "name": "j", "val": "7"}, {"id": "601", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "602", "type": "val", "name": "count", "val": "0"}, {"id": "607", "type": "val", "name": "j", "val": "8"}, {"id": "608", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "613", "type": "val", "name": "j", "val": "9"}, {"id": "614", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "620", "type": "val", "name": "i", "val": "9"}, {"id": "622", "type": "val", "name": "j", "val": "0"}, {"id": "623", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "628", "type": "val", "name": "j", "val": "1"}, {"id": "629", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "634", "type": "val", "name": "j", "val": "2"}, {"id": "635", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "640", "type": "val", "name": "j", "val": "3"}, {"id": "641", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "646", "type": "val", "name": "j", "val": "4"}, {"id": "647", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "648", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 1 1]\n [5 5 2 5 5 5 5 5 1 5]\n [5 5 2 5 5 5 5 5 5 3]\n [2 2 5 5 5 5 1 5 5 5]\n [5 5 5 5 4 5 1 1 5 0]]"}, {"id": "649", "type": "val", "name": "count", "val": "1"}, {"id": "651", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) green`(input_grid, i, j)"}, {"id": "652", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 1 1]\n [5 5 2 5 5 5 5 5 1 5]\n [5 5 2 5 5 5 5 5 5 3]\n [2 2 5 5 5 5 1 5 5 5]\n [5 5 5 5 3 5 1 1 5 0]]"}, {"id": "654", "type": "val", "name": "j", "val": "5"}, {"id": "655", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "656", "type": "val", "name": "count", "val": "0"}, {"id": "661", "type": "val", "name": "j", "val": "6"}, {"id": "662", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "667", "type": "val", "name": "j", "val": "7"}, {"id": "668", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "673", "type": "val", "name": "j", "val": "8"}, {"id": "674", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "679", "type": "val", "name": "j", "val": "9"}, {"id": "680", "type": "stmt", "val": "count = `If the point(i,j) is black, perform floodfill algorithm to count how many black points connected to it`(input_grid, i, j)"}, {"id": "681", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 1 1]\n [5 5 2 5 5 5 5 5 1 5]\n [5 5 2 5 5 5 5 5 5 3]\n [2 2 5 5 5 5 1 5 5 5]\n [5 5 5 5 3 5 1 1 5 4]]"}, {"id": "684", "type": "stmt", "val": "`use floodfill algoritm to color the black area of (i,j) green`(input_grid, i, j)"}, {"id": "685", "type": "val", "name": "input_grid", "val": "[[3 5 5 5 5 5 1 1 5 5]\n [5 5 5 3 5 5 1 5 2 5]\n [5 5 1 5 5 5 5 5 2 5]\n [5 1 1 5 5 5 5 5 5 5]\n [2 5 5 5 5 5 2 5 5 5]\n [2 5 5 3 5 5 2 5 1 1]\n [5 5 2 5 5 5 5 5 1 5]\n [5 5 2 5 5 5 5 5 5 3]\n [2 2 5 5 5 5 1 5 5 5]\n [5 5 5 5 3 5 1 1 5 3]]"}, {"id": "688", "type": "stmt", "val": "return input_grid"}], "edges": [["4", "5"], ["2", "5"], ["0", "5"], ["5", "6"], ["5", "7"], ["2", "9"], ["4", "9"], ["6", "9"], ["9", "10"], ["12", "13"], ["2", "13"], ["7", "13"], ["10", "13"], ["13", "14"], ["19", "20"], ["2", "20"], ["14", "20"], ["10", "20"], ["25", "26"], ["2", "26"], ["14", "26"], ["10", "26"], ["31", "32"], ["2", "32"], ["14", "32"], ["10", "32"], ["37", "38"], ["2", "38"], ["14", "38"], ["10", "38"], ["43", "44"], ["2", "44"], ["14", "44"], ["10", "44"], ["44", "45"], ["44", "46"], ["43", "50"], ["2", "50"], ["45", "50"], ["50", "51"], ["53", "54"], ["2", "54"], ["46", "54"], ["51", "54"], ["54", "55"], ["60", "61"], ["2", "61"], ["55", "61"], ["51", "61"], ["66", "67"], ["2", "67"], ["55", "67"], ["51", "67"], ["75", "76"], ["73", "76"], ["55", "76"], ["51", "76"], ["81", "82"], ["73", "82"], ["55", "82"], ["51", "82"], ["87", "88"], ["73", "88"], ["55", "88"], ["51", "88"], ["93", "94"], ["73", "94"], ["55", "94"], ["51", "94"], ["94", "95"], ["94", "96"], ["73", "98"], ["93", "98"], ["95", "98"], ["98", "99"], ["101", "102"], ["73", "102"], ["96", "102"], ["99", "102"], ["102", "103"], ["108", "109"], ["73", "109"], ["103", "109"], ["99", "109"], ["114", "115"], ["73", "115"], ["103", "115"], ["99", "115"], ["120", "121"], ["73", "121"], ["103", "121"], ["99", "121"], ["126", "127"], ["73", "127"], ["103", "127"], ["99", "127"], ["127", "128"], ["127", "129"], ["126", "132"], ["73", "132"], ["128", "132"], ["132", "133"], ["135", "136"], ["73", "136"], ["129", "136"], ["133", "136"], ["136", "137"], ["145", "146"], ["143", "146"], ["137", "146"], ["133", "146"], ["151", "152"], ["143", "152"], ["137", "152"], ["133", "152"], ["157", "158"], ["143", "158"], ["137", "158"], ["133", "158"], ["158", "159"], ["158", "160"], ["157", "164"], ["143", "164"], ["159", "164"], ["164", "165"], ["167", "168"], ["143", "168"], ["160", "168"], ["165", "168"], ["168", "169"], ["174", "175"], ["143", "175"], ["169", "175"], ["165", "175"], ["180", "181"], ["143", "181"], ["169", "181"], ["165", "181"], ["186", "187"], ["143", "187"], ["169", "187"], ["165", "187"], ["192", "193"], ["143", "193"], ["169", "193"], ["165", "193"], ["198", "199"], ["143", "199"], ["169", "199"], ["165", "199"], ["204", "205"], ["143", "205"], ["169", "205"], ["165", "205"], ["213", "214"], ["211", "214"], ["169", "214"], ["165", "214"], ["219", "220"], ["211", "220"], ["169", "220"], ["165", "220"], ["225", "226"], ["211", "226"], ["169", "226"], ["165", "226"], ["231", "232"], ["211", "232"], ["169", "232"], ["165", "232"], ["237", "238"], ["211", "238"], ["169", "238"], ["165", "238"], ["243", "244"], ["211", "244"], ["169", "244"], ["165", "244"], ["249", "250"], ["211", "250"], ["169", "250"], ["165", "250"], ["255", "256"], ["211", "256"], ["169", "256"], ["165", "256"], ["261", "262"], ["211", "262"], ["169", "262"], ["165", "262"], ["267", "268"], ["211", "268"], ["169", "268"], ["165", "268"], ["276", "277"], ["274", "277"], ["169", "277"], ["165", "277"], ["277", "278"], ["277", "279"], ["276", "282"], ["274", "282"], ["278", "282"], ["282", "283"], ["285", "286"], ["274", "286"], ["279", "286"], ["283", "286"], ["286", "287"], ["292", "293"], ["274", "293"], ["287", "293"], ["283", "293"], ["298", "299"], ["274", "299"], ["287", "299"], ["283", "299"], ["304", "305"], ["274", "305"], ["287", "305"], ["283", "305"], ["310", "311"], ["274", "311"], ["287", "311"], ["283", "311"], ["316", "317"], ["274", "317"], ["287", "317"], ["283", "317"], ["317", "318"], ["317", "319"], ["316", "322"], ["274", "322"], ["318", "322"], ["322", "323"], ["325", "326"], ["274", "326"], ["319", "326"], ["323", "326"], ["326", "327"], ["332", "333"], ["274", "333"], ["327", "333"], ["323", "333"], ["338", "339"], ["274", "339"], ["327", "339"], ["323", "339"], ["347", "348"], ["345", "348"], ["327", "348"], ["323", "348"], ["353", "354"], ["345", "354"], ["327", "354"], ["323", "354"], ["359", "360"], ["345", "360"], ["327", "360"], ["323", "360"], ["365", "366"], ["345", "366"], ["327", "366"], ["323", "366"], ["366", "367"], ["366", "368"], ["345", "370"], ["365", "370"], ["367", "370"], ["370", "371"], ["373", "374"], ["345", "374"], ["368", "374"], ["371", "374"], ["374", "375"], ["380", "381"], ["345", "381"], ["375", "381"], ["371", "381"], ["386", "387"], ["345", "387"], ["375", "387"], ["371", "387"], ["392", "393"], ["345", "393"], ["375", "393"], ["371", "393"], ["398", "399"], ["345", "399"], ["375", "399"], ["371", "399"], ["399", "400"], ["399", "401"], ["398", "405"], ["345", "405"], ["400", "405"], ["405", "406"], ["408", "409"], ["345", "409"], ["401", "409"], ["406", "409"], ["409", "410"], ["418", "419"], ["416", "419"], ["410", "419"], ["406", "419"], ["424", "425"], ["416", "425"], ["410", "425"], ["406", "425"], ["430", "431"], ["416", "431"], ["410", "431"], ["406", "431"], ["431", "432"], ["431", "433"], ["430", "436"], ["416", "436"], ["432", "436"], ["436", "437"], ["439", "440"], ["416", "440"], ["433", "440"], ["437", "440"], ["440", "441"], ["446", "447"], ["416", "447"], ["441", "447"], ["437", "447"], ["452", "453"], ["416", "453"], ["441", "453"], ["437", "453"], ["458", "459"], ["416", "459"], ["441", "459"], ["437", "459"], ["464", "465"], ["416", "465"], ["441", "465"], ["437", "465"], ["470", "471"], ["416", "471"], ["441", "471"], ["437", "471"], ["476", "477"], ["416", "477"], ["441", "477"], ["437", "477"], ["485", "486"], ["483", "486"], ["441", "486"], ["437", "486"], ["491", "492"], ["483", "492"], ["441", "492"], ["437", "492"], ["497", "498"], ["483", "498"], ["441", "498"], ["437", "498"], ["503", "504"], ["483", "504"], ["441", "504"], ["437", "504"], ["509", "510"], ["483", "510"], ["441", "510"], ["437", "510"], ["515", "516"], ["483", "516"], ["441", "516"], ["437", "516"], ["521", "522"], ["483", "522"], ["441", "522"], ["437", "522"], ["527", "528"], ["483", "528"], ["441", "528"], ["437", "528"], ["533", "534"], ["483", "534"], ["441", "534"], ["437", "534"], ["539", "540"], ["483", "540"], ["441", "540"], ["437", "540"], ["540", "541"], ["540", "542"], ["483", "544"], ["539", "544"], ["541", "544"], ["544", "545"], ["550", "551"], ["548", "551"], ["542", "551"], ["545", "551"], ["551", "552"], ["551", "553"], ["550", "556"], ["548", "556"], ["552", "556"], ["556", "557"], ["559", "560"], ["548", "560"], ["553", "560"], ["557", "560"], ["560", "561"], ["566", "567"], ["548", "567"], ["561", "567"], ["557", "567"], ["572", "573"], ["548", "573"], ["561", "573"], ["557", "573"], ["578", "579"], ["548", "579"], ["561", "579"], ["557", "579"], ["584", "585"], ["548", "585"], ["561", "585"], ["557", "585"], ["590", "591"], ["548", "591"], ["561", "591"], ["557", "591"], ["591", "592"], ["591", "593"], ["590", "597"], ["548", "597"], ["592", "597"], ["597", "598"], ["600", "601"], ["548", "601"], ["593", "601"], ["598", "601"], ["601", "602"], ["607", "608"], ["548", "608"], ["602", "608"], ["598", "608"], ["613", "614"], ["548", "614"], ["602", "614"], ["598", "614"], ["622", "623"], ["620", "623"], ["602", "623"], ["598", "623"], ["628", "629"], ["620", "629"], ["602", "629"], ["598", "629"], ["634", "635"], ["620", "635"], ["602", "635"], ["598", "635"], ["640", "641"], ["620", "641"], ["602", "641"], ["598", "641"], ["646", "647"], ["620", "647"], ["602", "647"], ["598", "647"], ["647", "648"], ["647", "649"], ["620", "651"], ["646", "651"], ["648", "651"], ["651", "652"], ["654", "655"], ["620", "655"], ["649", "655"], ["652", "655"], ["655", "656"], ["661", "662"], ["620", "662"], ["656", "662"], ["652", "662"], ["667", "668"], ["620", "668"], ["656", "668"], ["652", "668"], ["673", "674"], ["620", "674"], ["656", "674"], ["652", "674"], ["679", "680"], ["620", "680"], ["656", "680"], ["652", "680"], ["680", "681"], ["620", "684"], ["679", "684"], ["681", "684"], ["684", "685"], ["685", "688"]]}