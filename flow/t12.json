{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "output_grid = `anticlockwise rotate the input grid if the rows is larger than columns in input grid.`(input_grid)"}, {"id": "2", "type": "val", "name": "output_grid", "val": "[[0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "3", "type": "stmt", "val": "color_and_position = `find the two non black elements in input grid, return the element and position`(output_grid)"}, {"id": "4", "type": "val", "name": "color_and_position", "val": "[(3, (0, 5)), (4, (10, 10))]"}, {"id": "5", "type": "stmt", "val": "output_grid = `set the columns of positions to color in input grid`(output_grid, color_and_position)"}, {"id": "7", "type": "val", "name": "output_grid", "val": "[[0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "8", "type": "stmt", "val": "output_grid = `started from the first colored column to the end of the grid, interval by the distance of the two colored column, fill the column with the first color and change the color next interval `(output_grid, color_and_position)"}, {"id": "9", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]]"}, {"id": "10", "type": "val", "name": "output_grid", "val": "[[0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]\n [0 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0 0 0 0 4 0 0 0 0 3 0]]"}, {"id": "11", "type": "stmt", "val": "output_grid = `there are two grid, if the rows is larger than columns in first grid, rotate the second grid, return the second grid only `(input_grid, output_grid)"}, {"id": "12", "type": "stmt", "val": "return output_grid"}], "edges": [["0", "1"], ["1", "2"], ["2", "3"], ["3", "4"], ["2", "5"], ["4", "5"], ["5", "7"], ["7", "8"], ["4", "8"], ["8", "9"], ["8", "10"], ["9", "11"], ["10", "11"], ["10", "12"]]}