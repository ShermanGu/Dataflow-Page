{"nodes": [{"id": "0", "type": "val", "name": "input_grid", "val": "[[4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 8 0 3 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "1", "type": "stmt", "val": "(x1, y1, x2, y2) = `From left to right, top to bottom, traverse the entire grid, find the first yellow pixel (x1, y1), the last yellow pixel (x2, y2), return (x1, y1, x2, y2)`(input_grid)"}, {"id": "7", "type": "val", "name": "ans_grid", "val": "[[4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4]]"}, {"id": "9", "type": "val", "name": "input_grid", "val": "[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 8 0 3 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]"}, {"id": "10", "type": "stmt", "val": "(minx, miny, maxx, maxy) = `Define four variables (minx, miny, maxx, maxy) as the smallest x, the smallest y, the largest x, and the largest y. Traverse all the pixels in the new grid, if a pixel (x, y) is not black, use the pixel to update the above four variables`(input_grid)"}, {"id": "16", "type": "val", "name": "target_grid", "val": "[[8 0 3]\n [1 1 1]\n [0 1 0]]"}, {"id": "17", "type": "stmt", "val": "(kind, cnt) = `Traverse all pixels in ansgrid, count the kind and quantity of non-black pixels, and return (kind, cnt)`(ans_grid)"}, {"id": "21", "type": "val", "name": "side_length", "val": "4.242640687119285"}, {"id": "22", "type": "stmt", "val": "target_grid = `Expand the target_grid proportionally by the side_length times, and the shape becomes (4*target_grid.shape[0],4*target_grid.shape[1])`(target_grid, side_length)"}, {"id": "23", "type": "val", "name": "target_grid", "val": "[[8 8 8 8 0 0 0 0 3 3 3 3]\n [8 8 8 8 0 0 0 0 3 3 3 3]\n [8 8 8 8 0 0 0 0 3 3 3 3]\n [8 8 8 8 0 0 0 0 3 3 3 3]\n [1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1]\n [1 1 1 1 1 1 1 1 1 1 1 1]\n [0 0 0 0 1 1 1 1 0 0 0 0]\n [0 0 0 0 1 1 1 1 0 0 0 0]\n [0 0 0 0 1 1 1 1 0 0 0 0]\n [0 0 0 0 1 1 1 1 0 0 0 0]]"}, {"id": "24", "type": "stmt", "val": "ans = `Find the first non-black and non-yellow pixel (x, y) in ans_grid, copy target_grid as grid to this position`(ans_grid, target_grid)"}, {"id": "26", "type": "val", "name": "ans", "val": "[[4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 8 8 8 8 0 0 0 0 3 3 3 3 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0]\n [0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0]\n [4 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 4]]"}, {"id": "27", "type": "stmt", "val": "return ans"}], "edges": [["0", "1"], ["9", "10"], ["7", "17"], ["21", "22"], ["16", "22"], ["22", "23"], ["23", "24"], ["7", "24"], ["24", "26"], ["26", "27"]]}