{"nodes": [{"id": "2", "type": "val", "name": "output_grid", "val": "[[1 2 3 4 5 6 7 0 0 0 3 4 5 6 7 8]\n [2 3 4 5 6 7 8 0 0 0 4 5 6 7 8 1]\n [3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2]\n [4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3]\n [5 6 0 0 0 0 3 4 5 6 7 8 1 2 3 4]\n [6 7 0 0 0 0 0 0 0 7 8 1 2 3 4 5]\n [7 8 0 0 0 0 0 0 0 8 1 2 3 4 5 6]\n [8 1 0 0 0 0 0 0 0 1 2 3 4 5 6 7]\n [1 2 3 4 5 0 0 0 0 2 3 4 5 6 7 8]\n [2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1]\n [3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2]\n [4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3]\n [5 6 7 8 1 2 3 0 0 6 7 8 1 2 3 4]\n [6 7 8 1 2 3 4 0 0 7 8 1 2 3 4 5]\n [7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6]\n [8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7]]"}, {"id": "3", "type": "stmt", "val": "while `whether there is black pixel in the grid`(output_grid):"}, {"id": "4", "type": "stmt", "val": "locs = `find the location of all black pixels`(output_grid)"}, {"id": "5", "type": "val", "name": "locs", "val": "(array([ 0,  0,  0,  1,  1,  1,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,\n        6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,\n        8, 12, 12, 13, 13], dtype=int64), array([7, 8, 9, 7, 8, 9, 2, 3, 4, 5, 2, 3, 4, 5, 6, 7, 8, 2, 3, 4, 5, 6,\n       7, 8, 2, 3, 4, 5, 6, 7, 8, 5, 6, 7, 8, 7, 8, 7, 8], dtype=int64))"}, {"id": "6", "type": "stmt", "val": "output_grid = `for each black pixel, if it has a not black pixel neighbour at its bottom left or top right, change the black pixel to the color of this neighbour`(output_grid, locs)"}, {"id": "8", "type": "val", "name": "output_grid", "val": "[[1 2 3 4 5 6 7 8 0 0 3 4 5 6 7 8]\n [2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1]\n [3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2]\n [4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3]\n [5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4]\n [6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5]\n [7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6]\n [8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7]\n [1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8]\n [2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1]\n [3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2]\n [4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3]\n [5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4]\n [6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5]\n [7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6]\n [8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7]]"}, {"id": "9", "type": "stmt", "val": "while `whether there is black pixel in the grid`(output_grid):"}, {"id": "10", "type": "stmt", "val": "locs = `find the location of all black pixels`(output_grid)"}, {"id": "11", "type": "val", "name": "locs", "val": "(array([0, 0], dtype=int64), array([8, 9], dtype=int64))"}, {"id": "12", "type": "stmt", "val": "output_grid = `for each black pixel, if it has a not black pixel neighbour at its bottom left or top right, change the black pixel to the color of this neighbour`(output_grid, locs)"}, {"id": "14", "type": "val", "name": "output_grid", "val": "[[1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8]\n [2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1]\n [3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2]\n [4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3]\n [5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4]\n [6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5]\n [7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6]\n [8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7]\n [1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8]\n [2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1]\n [3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2]\n [4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3]\n [5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4]\n [6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5]\n [7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6]\n [8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7]]"}, {"id": "15", "type": "stmt", "val": "while `whether there is black pixel in the grid`(output_grid):"}, {"id": "16", "type": "stmt", "val": "return output_grid"}], "edges": [["2", "3"], ["2", "4"], ["4", "5"], ["2", "6"], ["5", "6"], ["6", "8"], ["8", "9"], ["8", "10"], ["5", "10"], ["10", "11"], ["8", "12"], ["11", "12"], ["12", "14"], ["14", "15"], ["14", "16"]]}