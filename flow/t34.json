{"nodes": [{"id": "2", "type": "val", "name": "output_grid", "val": "[[0 0 0 6 0 2 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [9 0 8 8 8 8 0 0 0 0]\n [0 0 8 8 8 8 0 0 0 7]\n [3 0 8 8 8 8 0 0 0 0]\n [4 0 8 8 8 8 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 6 0 0 0 0 0]]"}, {"id": "5", "type": "stmt", "val": "first_col = `get the first column of the grid`(output_grid)"}, {"id": "6", "type": "val", "name": "first_col", "val": "[0 0 0 9 0 3 4 0 0 0]"}, {"id": "7", "type": "stmt", "val": "list = `find the list of tuple that contain non-blacack color and its index in the numpy 1D array`(first_col)"}, {"id": "8", "type": "val", "name": "list", "val": "[(9, 3), (3, 5), (4, 6)]"}, {"id": "10", "type": "val", "name": "color", "val": "9"}, {"id": "11", "type": "val", "name": "row", "val": "3"}, {"id": "12", "type": "stmt", "val": "output_grid = `fill the leftmost teal block in the corresponding row with the corresponding color in the grid`(output_grid, row, color)"}, {"id": "13", "type": "val", "name": "output_grid", "val": "[[0 0 0 6 0 2 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [9 0 9 8 8 8 0 0 0 0]\n [0 0 8 8 8 8 0 0 0 7]\n [3 0 8 8 8 8 0 0 0 0]\n [4 0 8 8 8 8 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 6 0 0 0 0 0]]"}, {"id": "15", "type": "val", "name": "color", "val": "3"}, {"id": "16", "type": "val", "name": "row", "val": "5"}, {"id": "17", "type": "stmt", "val": "output_grid = `fill the leftmost teal block in the corresponding row with the corresponding color in the grid`(output_grid, row, color)"}, {"id": "18", "type": "val", "name": "output_grid", "val": "[[0 0 0 6 0 2 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [9 0 9 8 8 8 0 0 0 0]\n [0 0 8 8 8 8 0 0 0 7]\n [3 0 3 8 8 8 0 0 0 0]\n [4 0 8 8 8 8 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 6 0 0 0 0 0]]"}, {"id": "20", "type": "val", "name": "color", "val": "4"}, {"id": "21", "type": "val", "name": "row", "val": "6"}, {"id": "22", "type": "stmt", "val": "output_grid = `fill the leftmost teal block in the corresponding row with the corresponding color in the grid`(output_grid, row, color)"}, {"id": "23", "type": "val", "name": "output_grid", "val": "[[0 0 0 6 0 2 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [9 0 9 8 8 8 0 0 0 0]\n [0 0 8 8 8 8 0 0 0 7]\n [3 0 3 8 8 8 0 0 0 0]\n [4 0 4 8 8 8 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 6 0 0 0 0 0]]"}, {"id": "25", "type": "stmt", "val": "output_grid = `rotate the grid 90 degrees cllockwise`(output_grid)"}, {"id": "26", "type": "val", "name": "output_grid", "val": "[[0 0 0 4 3 0 9 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 4 3 8 9 0 0 0]\n [0 0 0 8 8 8 8 0 0 6]\n [6 0 0 8 8 8 8 0 0 0]\n [0 0 0 8 8 8 8 0 0 2]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 7 0 0 0 0]]"}, {"id": "29", "type": "stmt", "val": "first_col = `get the first column of the grid`(output_grid)"}, {"id": "30", "type": "val", "name": "first_col", "val": "[0 0 0 0 6 0 0 0 0 0]"}, {"id": "31", "type": "stmt", "val": "list = `find the list of tuple that contain non-blacack color and its index in the numpy 1D array`(first_col)"}, {"id": "32", "type": "val", "name": "list", "val": "[(6, 4)]"}, {"id": "34", "type": "val", "name": "color", "val": "6"}, {"id": "35", "type": "val", "name": "row", "val": "4"}, {"id": "36", "type": "stmt", "val": "output_grid = `fill the leftmost teal block in the corresponding row with the corresponding color in the grid`(output_grid, row, color)"}, {"id": "37", "type": "val", "name": "output_grid", "val": "[[0 0 0 4 3 0 9 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 4 3 8 9 0 0 0]\n [0 0 0 8 8 8 8 0 0 6]\n [6 0 0 6 8 8 8 0 0 0]\n [0 0 0 8 8 8 8 0 0 2]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 7 0 0 0 0]]"}, {"id": "39", "type": "stmt", "val": "output_grid = `rotate the grid 90 degrees cllockwise`(output_grid)"}, {"id": "40", "type": "val", "name": "output_grid", "val": "[[0 0 0 0 0 6 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 8 6 8 4 0 4]\n [0 0 0 0 8 8 8 3 0 3]\n [7 0 0 0 8 8 8 8 0 0]\n [0 0 0 0 8 8 8 9 0 9]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 2 0 6 0 0 0]]"}, {"id": "43", "type": "stmt", "val": "first_col = `get the first column of the grid`(output_grid)"}, {"id": "44", "type": "val", "name": "first_col", "val": "[0 0 0 0 0 7 0 0 0 0]"}, {"id": "45", "type": "stmt", "val": "list = `find the list of tuple that contain non-blacack color and its index in the numpy 1D array`(first_col)"}, {"id": "46", "type": "val", "name": "list", "val": "[(7, 5)]"}, {"id": "48", "type": "val", "name": "color", "val": "7"}, {"id": "49", "type": "val", "name": "row", "val": "5"}, {"id": "50", "type": "stmt", "val": "output_grid = `fill the leftmost teal block in the corresponding row with the corresponding color in the grid`(output_grid, row, color)"}, {"id": "51", "type": "val", "name": "output_grid", "val": "[[0 0 0 0 0 6 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 8 6 8 4 0 4]\n [0 0 0 0 8 8 8 3 0 3]\n [7 0 0 0 7 8 8 8 0 0]\n [0 0 0 0 8 8 8 9 0 9]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 2 0 6 0 0 0]]"}, {"id": "53", "type": "stmt", "val": "output_grid = `rotate the grid 90 degrees cllockwise`(output_grid)"}, {"id": "54", "type": "val", "name": "output_grid", "val": "[[0 0 0 0 7 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [2 0 0 8 7 8 8 0 0 0]\n [0 0 0 8 8 8 6 0 0 6]\n [6 0 0 8 8 8 8 0 0 0]\n [0 0 0 9 8 3 4 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 9 0 3 4 0 0 0]]"}, {"id": "57", "type": "stmt", "val": "first_col = `get the first column of the grid`(output_grid)"}, {"id": "58", "type": "val", "name": "first_col", "val": "[0 0 0 0 2 0 6 0 0 0]"}, {"id": "59", "type": "stmt", "val": "list = `find the list of tuple that contain non-blacack color and its index in the numpy 1D array`(first_col)"}, {"id": "62", "type": "val", "name": "color", "val": "2"}, {"id": "63", "type": "val", "name": "row", "val": "4"}, {"id": "64", "type": "stmt", "val": "output_grid = `fill the leftmost teal block in the corresponding row with the corresponding color in the grid`(output_grid, row, color)"}, {"id": "65", "type": "val", "name": "output_grid", "val": "[[0 0 0 0 7 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [2 0 0 2 7 8 8 0 0 0]\n [0 0 0 8 8 8 6 0 0 6]\n [6 0 0 8 8 8 8 0 0 0]\n [0 0 0 9 8 3 4 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 9 0 3 4 0 0 0]]"}, {"id": "67", "type": "val", "name": "color", "val": "6"}, {"id": "68", "type": "val", "name": "row", "val": "6"}, {"id": "69", "type": "stmt", "val": "output_grid = `fill the leftmost teal block in the corresponding row with the corresponding color in the grid`(output_grid, row, color)"}, {"id": "70", "type": "val", "name": "output_grid", "val": "[[0 0 0 0 7 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [2 0 0 2 7 8 8 0 0 0]\n [0 0 0 8 8 8 6 0 0 6]\n [6 0 0 6 8 8 8 0 0 0]\n [0 0 0 9 8 3 4 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 9 0 3 4 0 0 0]]"}, {"id": "72", "type": "stmt", "val": "output_grid = `rotate the grid 90 degrees cllockwise`(output_grid)"}, {"id": "73", "type": "val", "name": "output_grid", "val": "[[0 0 0 6 0 2 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [9 0 9 6 8 2 0 0 0 0]\n [0 0 8 8 8 7 0 0 0 7]\n [3 0 3 8 8 8 0 0 0 0]\n [4 0 4 8 6 8 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 6 0 0 0 0 0]]"}, {"id": "75", "type": "stmt", "val": "return output_grid"}], "edges": [["2", "5"], ["5", "6"], ["6", "7"], ["7", "8"], ["11", "12"], ["2", "12"], ["10", "12"], ["12", "13"], ["16", "17"], ["13", "17"], ["15", "17"], ["17", "18"], ["21", "22"], ["18", "22"], ["20", "22"], ["22", "23"], ["23", "25"], ["25", "26"], ["26", "29"], ["6", "29"], ["29", "30"], ["8", "31"], ["30", "31"], ["31", "32"], ["35", "36"], ["26", "36"], ["34", "36"], ["36", "37"], ["37", "39"], ["39", "40"], ["40", "43"], ["30", "43"], ["43", "44"], ["32", "45"], ["44", "45"], ["45", "46"], ["49", "50"], ["40", "50"], ["48", "50"], ["50", "51"], ["51", "53"], ["53", "54"], ["54", "57"], ["44", "57"], ["57", "58"], ["46", "59"], ["58", "59"], ["63", "64"], ["54", "64"], ["62", "64"], ["64", "65"], ["68", "69"], ["65", "69"], ["67", "69"], ["69", "70"], ["70", "72"], ["72", "73"], ["73", "75"]]}